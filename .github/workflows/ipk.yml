# # # # # # # # # # #
# 自动构建 openWrt G-DOCK
#     花妆男
# # # # # # # # # # #
name: ipk
on:
#  schedule:                           # 时间表
#    - cron: '0 19 * * *'              # 每天国际时间19点，北京时间凌晨3点执行(北京+8)
#  push:                               # push 操作
#    branches:                         # 分支
#      - master                        # 主分支
  #   paths:                            # 路径
  #     - openwrt/*                     # 监听openwrt目录下所有文件的push操作
  #  paths:                            # 路径
  #    - logs/g-dock.md                    # 监听logs目录下 k2.md 的push操作
   watch:                              # 监视操作
     types: [started]                  # 点击 star 之后
     branches:  
       - master
env:
  T_NAME: "x64"                     # 设备名字 (op编译慢所以直接单个的编译)
  BASE_PATH: openwrt                   # 基础目录
  PUBLIC_PATH: public                  # 公共目录
  PUBLIC_SH: public.sh                 # 公共执行文件
  UPLOAD_PACKAGES_DIR: true                 # 是否导出bin文件
  UPLOAD_FIRMWARE: true                # 是否导出固件
  CLONE_URL: https://github.com/Lienol/openwrt  # 地址
  CLONE_BRANCH: dev-master                 # 分支
  WORK_PATH: opt/openwrt               # 工作目录

jobs:
  build:
    runs-on: ubuntu-18.04
    if: github.event.repository.owner.id == github.event.sender.id
    steps:
    - name: Checkout Master               # 1.导入主分支
      uses: actions/checkout@master

    - name: Initialization Environment    # 2.初始化环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo swapoff /swapfile
        sudo rm -rf /swapfile /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler antlr3 gperf
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        # sudo apt-get update
        # sudo apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3.5 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler g++-multilib antlr3 gperf
        # df -h
        sudo timedatectl set-timezone 'Asia/Shanghai'  # 设置时区
    - name: Clone Code                      # 3.拷贝代码
      run: |
        git clone --depth=1 $CLONE_URL -b $CLONE_BRANCH $WORK_PATH
        rm -rf openwrt/package/default-settings
        git clone https://github.com/weiwuji1/default-settings openwrt/package/default-settings
        git clone https://github.com/Leo-Jo-My/my openwrt/package/my
        git clone -b lean https://github.com/Sweet-Fairy/luci-app-ssr-plus-Jo openwrt/package/lean/luci-app-ssr-plus-lean
        git clone https://github.com/Leo-Jo-My/luci-app-vssr openwrt/package/luci-app-vssr
        git clone https://github.com/lisaac/luci-app-diskman openwrt/package/lean/luci-app-diskman
        svn checkout https://github.com/coolsnowwolf/lede/trunk/package/lean/luci-app-cifs-mount openwrt/package/my/luci-app-cifs-mount         
        svn checkout https://github.com/Leo-Jo-My/openwrt18.06/trunk/package/my/luci-app-koolproxyR openwrt/package/my/luci-app-koolproxyR
        svn checkout https://github.com/Leo-Jo-My/openwrt18.06/trunk/package/my/luci-app-openclash openwrt/package/my/luci-app-openclash
        svn checkout https://github.com/Leo-Jo-My/openwrt18.06/trunk/package/my/luci-app-serverchan openwrt/package/my/luci-app-serverchan   
        mkdir -p openwrt/package/lean/parted && cp -i openwrt/package/lean/luci-app-diskman/Parted.Makefile openwrt/package/lean/parted/Makefile                 
    
    - name: Clone Config
      env: 
        REPO_URL: https://github.com/Lienol/openwrt-actions
      run: git clone --depth 1 $REPO_URL openwrt-config      
   
    - name: Update Feeds                    # 4.下载Feeds
      run: |
        cd $WORK_PATH
        ./scripts/feeds update -a
    - name: Install feeds
      run: cd $WORK_PATH && ./scripts/feeds install -a

    - name: Custom configure file
      run: |
          cd openwrt
          rm -f .config
          cp ../openwrt-config/x64-master .config
    - name: Make Defconfig
      run: |
          cd $WORK_PATH
          make defconfig
    
    - name: SSH connection to Actions
      env:
        SSH_ACTIONS: true
      uses: P3TERX/debugger-action@master
      if: env.SSH_ACTIONS == 'true'
    - name: Download  Package                # 6.下载包
      run: |
        cd $WORK_PATH
        make defconfig
        make download -j8
        find dl -size -1024c -exec rm -f {} \;
    - name: Build                            # 7. 构建
      run: |
        cd $WORK_PATH
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 V=s
    - name: Organize Firmware                  # 8. 整理固件包
      if: success()
      run: |
        cd $WORK_PATH/bin/targets/*/*
        rm -rf packages
        echo "::set-env name=FILE_NAME::$T_NAME-$(date "+%Y%m%d")"   # 文件名
        echo "::set-env name=FIRMWARE::$PWD"                         # Firmware 路径
    - name: Organize Packages                 # 9. 整理插件包
      if: success()
      run: |
        cd $WORK_PATH/bin/packages
        echo "::set-env name=PACKAGES_PATH::$PWD"                    # 插件包目录文件路径
    - name: Upload Packages Directory              # 10. 导出插件包目录
      uses: actions/upload-artifact@master
      if: env.UPLOAD_PACKAGES_DIR == 'true' && success()
      with:
        name: OpenWrt-${{env.FILE_NAME}}-Packages
        path: ${{ env.PACKAGES_PATH }}

    - name: Upload Firmware Directory        # 11. 导出固件目录
      uses: actions/upload-artifact@master
      if: success()
      with:
        name: OpenWrt-${{env.FILE_NAME}}
        path: ${{ env.FIRMWARE }}
